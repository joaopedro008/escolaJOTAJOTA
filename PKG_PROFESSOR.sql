CREATE OR REPLACE PACKAGE PKG_PROFESSOR AS
    PROCEDURE LISTAR_TURMAS_POR_PROFESSOR;
    FUNCTION TOTAL_TURMAS_PROFESSOR(P_ID_PROFESSOR IN NUMBER) RETURN NUMBER;
    FUNCTION PROFESSOR_DA_DISCIPLINA(P_ID_DISCIPLINA IN NUMBER) RETURN VARCHAR2;
END PKG_PROFESSOR;

/


CREATE OR REPLACE PACKAGE BODY PKG_PROFESSOR AS

    -- Cursor para listar professores e o total de turmas
    PROCEDURE LISTAR_TURMAS_POR_PROFESSOR IS
        CURSOR C_PROFESSORES_TURMAS IS
        SELECT P.NOME, COUNT(T.ID_TURMA) AS TOTAL_TURMAS
        FROM PROFESSOR P
        JOIN TURMA T ON P.ID_PROFESSOR = T.ID_PROFESSOR
        GROUP BY P.NOME
        HAVING COUNT(T.ID_TURMA) > 1;
    BEGIN
        FOR R_PROFESSOR IN C_PROFESSORES_TURMAS LOOP
            DBMS_OUTPUT.PUT_LINE('Professor: ' || R_PROFESSOR.NOME || ', Total de Turmas: ' || R_PROFESSOR.TOTAL_TURMAS);
        END LOOP;
    END LISTAR_TURMAS_POR_PROFESSOR;

    -- Function para retornar o total de turmas de um professor
    FUNCTION TOTAL_TURMAS_PROFESSOR(P_ID_PROFESSOR IN NUMBER) RETURN NUMBER IS
        V_TOTAL_TURMAS NUMBER;
    BEGIN
        SELECT COUNT(ID_TURMA)
        INTO V_TOTAL_TURMAS
        FROM TURMA
        WHERE ID_PROFESSOR = P_ID_PROFESSOR;

        RETURN NVL(V_TOTAL_TURMAS, 0);
    END TOTAL_TURMAS_PROFESSOR;

    -- Function para retornar o professor responsável por uma disciplina
    FUNCTION PROFESSOR_DA_DISCIPLINA(P_ID_DISCIPLINA IN NUMBER) RETURN VARCHAR2 IS
        V_NOME_PROFESSOR VARCHAR2(100);
    BEGIN
        SELECT P.NOME
        INTO V_NOME_PROFESSOR
        FROM PROFESSOR P
        JOIN TURMA T ON P.ID_PROFESSOR = T.ID_PROFESSOR
        WHERE T.ID_DISCIPLINA = P_ID_DISCIPLINA
        AND ROWNUM = 1; -- Para evitar múltiplos registros

        RETURN V_NOME_PROFESSOR;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'Nenhum professor encontrado';
    END PROFESSOR_DA_DISCIPLINA;

END PKG_PROFESSOR;
/
